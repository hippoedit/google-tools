function readStorage(key, def_val)
{
 	var vStorage = GetStorage(eStorageTypeWorkspace, "", eAccessTypeReadWrite);
	if ( vStorage != undefined )
	{
		var val1 = vStorage.read(key);
		if (val1 != undefined) return val1;
	}
	return def_val;
}

var nIconTranslate = Application.RegisterImageString(
'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAh1BMVEUAAACCgoKDg4OBgYF/f3+Ghob/\
 //8AAACKiooAAAAfHiDa3d4iISM8OzwuLS/S1NUpKCknJijm6Oje4eIVFBX2+PgcGhzX2dtVVVb6/P0Z\
 GRp1dXaFhYXU1tfi5OXo6urs7u40MzVZWVvw8vK2uLdKSkqXl5hCQkKKiopxcXNAQEJpaWzAwcKPUiIf\
 AAAACnRSTlMA////xu7/M/4nCdr4ggAAAJhJREFUGNNtz8cWgjAURdGXoNdFGqFLEQQblv//PkkykIF7\
 eAav0NKzn34h4tjiRAzJqpZ5Lk8JmAu1lHIo2pYNMoRszMZL2UCUowscRdUIIZQ1qgD3Qy1SAPcUnxCU\
 MRZHaJxVCF0KhVv2sCjDUO+qlwlwIQIqzIDW2hhwHzALoHtOeIdLg5dfxf78suMsWjGP74niw1ZMX9yg\
 CiOPiFglAAAAAElFTkSuQmCC'
);

function sendRequest(url,callback,postData) {
	var req = createXMLHTTPObject();
	if (!req) return;
	var method = (postData) ? "POST" : "GET";
	req.open(method,url,true);
	req.setRequestHeader('User-Agent','XMLHTTP/1.0');
	if (postData)
		req.setRequestHeader('Content-type','application/x-www-form-urlencoded');
	req.onreadystatechange = function () {
		if (req.readyState != 4) return;
		if (req.status != 200 && req.status != 304) {
//			alert('HTTP error ' + req.status);
			return;
		}
		callback(req); //section{
	}
	if (req.readyState == 4) return;
	req.send(postData);
}

var XMLHttpFactories = [
	function () {return new XMLHttpRequest()},
	function () {return new ActiveXObject("Msxml2.XMLHTTP")},
	function () {return new ActiveXObject("Msxml3.XMLHTTP")},
	function () {return new ActiveXObject("Microsoft.XMLHTTP")}
];

function createXMLHTTPObject() {
	var xmlhttp = false;
	for (var i=0;i<XMLHttpFactories.length;i++) {
		try {
			xmlhttp = XMLHttpFactories[i]();
		}
		catch (e) {
			continue;
		}
		break;
	}
	return xmlhttp;
}

function createQueryString(textToTranslate, user)
{
	var langFrom = aLanguages[readStorage("langFrom", 0)][0];
	var langTo 	 = aLanguages[readStorage("langTo", 4)][0];
	if ( user == true ) return 'http://translate.google.com/#' + langFrom + '|' + langTo + '|' + escape(textToTranslate);
	return 'http://translate.google.com/translate_a/t?client=x&text=' + escape(textToTranslate) + '&sl=' + langFrom + '&tl=' + langTo;
}

function handleRequest(req) {
	var vInfoObject = eval('(' + req.responseText + ')');
	var vHint = "";
	for (var i = 0; i < vInfoObject.sentences.length; i++)
	{
		vHint += '\\b' + vInfoObject.sentences[i].trans + '\\b0\r\n';
		if ( vInfoObject.dict != null && readStorage("showDict", true))
		{
			vHint += '[hr]\r\n';
			for (var y = 0; y < vInfoObject.dict.length; y++)
			{
				vHint += '[color=#0000AA]\\b' + vInfoObject.dict[y].pos + '\\b0[/color]\r\n';
				for (var x = 0; x < vInfoObject.dict[y].terms.length; x++)
					vHint += '    ' + vInfoObject.dict[y].terms[x] + '\r\n';
				vHint += '\r\n';
			}
		}
		vHint += '[hr]\r\n\\r[url='+ createQueryString(vInfoObject.sentences[i].orig, true) + ']More info[/url]';
	}
	ActiveView.ShowQuickInfo(vHint);
}

var aLanguages = new Array();
aLanguages[0] = new Array("auto", "Auto");
aLanguages[1] = new Array("en", "English");
aLanguages[2] = new Array("de", "German");
aLanguages[3] = new Array("fr", "French");
aLanguages[4] = new Array("ru", "Russian");

var vTranslateTip = new Command("GoogleTranslate.ShowTip", "Translate", "Show word translation in ToolTip", nIconTranslate);
vTranslateTip.onExecute = function() {
	var sel = ActiveView.Selection;

	// if there is no selection, take current word range as selection
	if ( sel.IsEmpty )
		sel = ActiveView.CurrentWord;

	var textToTranslate = ActiveDocument.GetText(sel);
	if ( textToTranslate != "" )
		sendRequest(createQueryString(textToTranslate), handleRequest);
}
vTranslateTip.onEnabled = function() {
	return ActiveDocument != null && ActiveView != null && (!ActiveView.Selection.IsEmpty || !ActiveView.CurrentWord.IsEmpty);
}

// register the command as global, to be able assign shortcuts to it
Application.RegisterCommand(vTranslateTip);

////////////////////////////////////////////////////////////////////////
// Initialize HTML Toolbar
Application.onInitToolbars = function (){
	var MyToolbar = this.GetToolBar("Google", true);
 	MyToolbar.Name = "Google Tools";
	MyToolbar.AddButton(vTranslateTip);
}

function dumpLanguagesCombo(id, auto)
{
	var vItems = "";
	for (var i = 0; i < aLanguages.length; i++)
	{
		if (aLanguages[i][0] != "auto" || auto == true)
			vItems += '<item text="' + aLanguages[i][1] + '"/>';
	}

	return '<combobox id="' + id + '" minwidth="25">' + vItems + '</combobox>';
}

function onOptionsInit()
{
	// read "setting" from persistent storage
	this.Parameters.langFrom = readStorage("langFrom", 0);
	this.Parameters.langTo 	 = readStorage("langTo", 4) - 1;
	this.Parameters.showDict = readStorage("showDict", true);

	this.Layout =
	'<dialog> \
	<groupbox title="Google Translate"> \
	   <group> \
	       <paragraph text="Source Language:" align="left"/>' +
		   dumpLanguagesCombo("langFrom", true)
	+ '</group> \
	   <group> \
	       <paragraph text="Target Language:" align="left"/>' +
		   dumpLanguagesCombo("langTo", false)
	+ '</group> \
	<checkbox title="Show dictionary information" checked="true" id="showDict"/> \
	</groupbox> \
	</dialog>';
}

function onOptionsApply()
{
	// store new "setting" value in persistent storage
	var vStorage = GetStorage(eStorageTypeWorkspace, "", eAccessTypeWrite);
 	vStorage.langTo = this.Parameters.langTo + 1; // we do not have auto in the list
 	vStorage.langFrom = this.Parameters.langFrom;
	vStorage.showDict = this.Parameters.showDict;
}

Application.RegisterOptionsPage("Google Tools", onOptionsInit, onOptionsApply);
Application.AddScriptInfo("F3901F15-9233-4131-BE76-4DF8DAC58DAF", "Google Tools", "1.0.0.2", "Google Tools for HippoEDIT", "HippoEDIT", "supportbox@hippoedit.com", "http://wiki.hippoedit.com/plugins/google_tools");